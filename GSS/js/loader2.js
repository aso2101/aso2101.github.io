var inventory = loadXMLDoc('textInventory.xml');
var authorform = document.getElementById('authorselector');
var workform =  document.getElementById('workselector');
var editorform =  document.getElementById('editorselector');

// this is a general-purpose function for loading XML
// documents into the DOM.
function loadXMLDoc(dname) {
  if (window.XMLHttpRequest) {
    xhttp = new XMLHttpRequest();
  } else {
    xhttp = new ActiveXObject("Microsoft.XMLHTTP");
  }
  xhttp.open("GET", dname, false);
  xhttp.send("");
  return xhttp.responseXML;
}

// this returns the query string as an associative array 
// for our purposes, we can use getUrl["urn"] to get the
// urn of the query string.
function getQuery() {
    var vars = [], hash;
    var loc = window.location.href.replace('#','');
    var hashes = loc.slice(window.location.href.indexOf('?') + 1).split('&');
    for(var i = 0; i < hashes.length; i++)
    {
        hash = hashes[i].split('=');
        vars.push(hash[0]);
        vars[hash[0]] = hash[1];
    }
    return vars;
}

// viewer.html should call a function that checks if there is a 
// query string:
// -  if so, use the URN of the query string to call
//    displayVerseClear(urn). 
// -  if not, load the form data and allow the user to find 
//    the verse in the corpus, and finally load the verse
//    from the form data.

// this is the function called by viewer.html,
// which builds the forms at the top of the page.
function loadForms() {
  $("[id=authorselector]").append("<label>Author: </label><div class='styled-select'><select name='authorName'></select></div><noscript><input type='button' value='Submit' onclick='loadWorks(authorName)'></input></noscript>");
  $("[id=workselector]").append("<label>Work: </label><div class='styled-select'><select name='workName'><option disabled selected> -- select a work -- </option></select></div><noscript><input type='button' value='Submit' onclick='loadEditions(workName)'></input></noscript>");
  $("[id=editionselector]").append("<label>Edition: </label><div class='styled-select'><select name='editionName'><option disabled selected> -- select an edition -- </option></select></div><noscript><input type='button' value='Submit' onclick='loadVerse(editionName)'></input></noscript>");
  $("[id=verseselector]").append("<label>Passage: </label><div class='styled-input'><input name='verseNo' id='verseNumber'></input></div>");
  $("[id=inputbutton]").append("<div class='styled-input-button'><input type='button' value='Submit'></input></div>");
  urn = decodeURI(getQuery()['urn']);
  loadAuthors(urn);
}

function loadAuthors(urn) {
  aurnx = '';
  authors = $(inventory).find('textgroup');
  selector = $("[id=authorselector]").find("select");
  $(selector).find('option').remove(); 
  $(selector).append('<option disabled selected> -- select an author -- </option>');
  for (i = 0; i < authors.length; i++) {
    author = authors[i];
    aurn = $(authors[i]).attr('urn');
    name = $(authors[i]).find('groupname').text();
    $(selector).append('<option value="'+aurn+'">'+name+"</option>");
  }
  if (urn === 'undefined') {
      $(selector).change(function() {
	  // this passes a partial URN,
	  // containing just the author name, to the
	  // loadWorks function.
	  loadWorks(this.form.authorName.value);
      });
  } else {
      aurnx = urn.split('.')[0]+':';
      $(selector).val(aurnx);
      loadWorks(urn);
  }
}

function loadWorks(urn) {
  // first, we have to decide whether the urn we are given
  // contains just the author, or is a complete URN.
  // the period after the author name will tell us.
  // if it is a full URN, the "works urn" will be a substring:
  wurnx = '';
  if (urn.indexOf('.') > -1) {
      spliturn = urn.split('.');
      aurn = spliturn[0]+':';
      wurnx = spliturn[0]+'.'+spliturn[1]+':';
      // we keep this separate from the work URN
      // that is generated by scanning the textInventory.
  } else {
      aurn = urn;
  }
  // now we populate the works list for this author
  works = $(inventory).find('textgroup[urn="'+aurn+'"]').find('work');
  selector = $("[id=workselector]").find("select");
  $(selector).find('option').remove();  
  $(selector).append('<option value="choose" disabled selected> -- select a work -- </option>');
  for (i = 0; i < works.length; i++) {
    wurn = $(works[i]).attr('urn');
    name = $(works[i]).find('title').text();
    $(selector).append('<option value="'+wurn+'">'+name+"</option>");
  }
  // now we again have a choice: if wurn has not been defined,
  // the user can select a work, and this will be passed
  // down the pipeline. otherwise, the work is preselected.
  if (wurnx === '') {
      $(selector).change(function() {
	  // this passes the URN of the work name to the
	  // loadEditions function.
	  loadEditions(this.form.workName.value);
      });
  } else {
      $(selector).val(wurnx);
      loadEditions(urn);
  }
}

function loadEditions(urn) {
  // first, we have to decide whether the urn we are given
  // contains just the author and the work, or is a complete URN.
  // if it contains TWO periods, then we have both a work
  // and an edition. otherwise it only contains a work.
  eurnx = '';
  spliturn = urn.split('.'); // => [0] urn:cts:indic:HƒÅla [1] SaSa.Vema:etc
  if (typeof spliturn[2] !== 'undefined') {
      wurn = spliturn[0]+'.'+spliturn[1].split('.')+':';
      eurnx = spliturn[0]+'.'+spliturn[1]+'.'+spliturn[2].split(':')[0]+':';
  } else {
      wurn = urn;
  }
  // the period after the author name will tell us.
  // if it is a full URN, the "works urn" will be a substring:
  editions = $(inventory).find('work[urn="'+wurn+'"]').find('edition');
  selector = $("[id=editionselector]").find("select");
  $(selector).find('option').remove(); 
  $(selector).append('<option disabled selected> -- select an edition -- </option>');
  for (i = 0; i < editions.length; i++) {
    name = $(editions[i]).find('label').text();
    eurn = $(editions[i]).attr('urn');
    $(selector).append('<option value="'+eurn+'">'+name+'</option>');
  }
  // now we again have a choice: if wurn has not been defined,
  // the user can select a work, and this will be passed
  // down the pipeline. otherwise, the work is preselected.
  if (eurnx === '') {
      $(selector).change(function() {
	  // this passes the URN of the edition to the
	  // loadVerse function.
	  loadVerse(this.form.editionName.value);
      });
  } else {
      $(selector).val(eurnx);
      loadVerse(urn);
  }
}

function loadVerse(urn) {
  // parse the urn again: if it contains anything after ':',
  // then it is complete; otherwise not.
  vurnx = '';
  vsubst = urn.substring(urn.lastIndexOf(':')+1,urn.length);
  if (vsubst != '') {
      eurn = urn.substring(0,urn.lastIndexOf(':')+1);
      vurnx = vsubst;
  } else {
      eurn = urn;
  }
  // removes existing versions on the page
  $(".version").remove();
  // this function will suggest the available
  // verses with a jquery autocomplete box.
  // PROBLEM: currently this only works with single-level
  // contexts.
  edition = $(inventory).find('edition[urn="'+eurn+'"]');
  scopepath = $(edition).find('citation').attr('scope');
  $("[id=verseselector]").append('<input name="editionName" value="'+eurn+'" type="hidden"></input>');
  path = $(edition).find('citation').attr('xpath');
  newpath = path.replace("='?'","");
  xml = loadXMLDoc($(edition).find('online').attr('docname'));
  scope = $(xml).xpath(scopepath, function(prefix) {
    if (prefix == "tei")
        return "http://www.tei-c.org/ns/1.0";
     });
  validRefs = $(scope).xpath(newpath, function(prefix) {
    if (prefix == "tei")
        return "http://www.tei-c.org/ns/1.0";
     });
  var RefList = []
  for (i = 0; i < validRefs.length; i++) {
    urnx = $(validRefs[i]).attr('n');
    RefList.push(urnx);
  }
  $("[name=verseNo]").autocomplete({
      source: RefList,
      focus: function (event, ui) {
                $(".ui-helper-hidden-accessible").hide();
                event.preventDefault();
      }
  });
  if (vurnx === '') {
      $("[id=inputbutton] input[value='Submit']").click(function() {
	  urnx = $('[id=verseselector] input[name=editionName]').val().concat($('[id=verseselector] input[name=verseNo]').val());
	  //insertUrn('urn',urnx);
	  //displayVerseClear(urnx);
	  goTo(urnx);
      });
  } else {
      // if the urn is already in the url,
      // display the verse first;
      // but make it possible for people to make other selections.
      $("[id=verseselector] input[name=verseNo]").val(vurnx);
      $("[id=inputbutton] input[value='Submit']").click(function() {
	  urnx = $('[id=verseselector] input[name=editionName]').val().concat($('[id=verseselector] input[name=verseNo]').val());
	  //insertUrn('urn',urnx);
	  //displayVerseClear(urnx);
	  goTo(urnx);
      });
      displayVerseClear(urn);
  }
}

function displayVerseClear(urn) {
  $(".version").remove();
  displayVerse(urn);
}

function displayVerse(urn) {
  // first check if the element already exists on the page
  if ( $('div[id="'+urn+'"]').length ) { }
  // if not:
  else {
    // first construct the div element, the header for it,
    // and two columns: one for the text, and one for references etc.
    $("body").append('<div id="'+urn+'" class="version"></div>');
    $('div[id="'+urn+'"]').append('<div class="textheader"></div>');
    // use GetPassagePlus to get the relevant details
    thisElement = GetPassagePlus(urn);
    // get the edition URN and the passage number
    eurn = "urn:cts:indic:"+ParseUrn(urn).awe+":"
    passage = ParseUrn(urn).reference
    // construct the heading:
    // for the title, we want to grab the "short title"
    // from the textInventory file, 
    // and then the passage number from the parsed URN.
    shorttitle = $(inventory).find('edition[urn="'+eurn+'"]').find('label').text();
    heading = shorttitle+": "+passage;
    // also a button to close it
    //$('div[id="'+urn+'"]').append('<div class="close">x</div>');
    // construct the previous element navigator
    thisval = thisElement.currentElement.attr('n');
    prevval = thisElement.previousElement.attr('n');
    nextval = thisElement.nextElement.attr('n');
    if (typeof prevval !== 'undefined') {
      $('div[id="'+urn+'"]').find('.textheader').append('<div class="prevSelect">'+prevval+'</div>');
      prevurn = urn.replace(thisval,prevval);
      $('.prevSelect').click( function(e) {
	  goTo(prevurn);
      });
    } else {
	$('div[id="'+urn+'"]').find('.textheader').append('<div class="prevSelect unavailable"></div>');
    }
    // add in the title between the navigation elements
    $('div[id="'+urn+'"]').find('.textheader').append('<div class="heading"><h2>'+heading+'</h2></div>');
    // construct the subsequent element navigator
    if (typeof nextval !== 'undefined') {
      $('div[id="'+urn+'"]').find('.textheader').append('<div class="nextSelect">'+nextval+'</div>');
      nexturn = urn.replace(thisval,nextval);
      $('.nextSelect').click( function(e) {
	  goTo(nexturn);
      });
    } else {
	$('div[id="'+urn+'"]').find('.textheader').append('<div class="nextSelect unavailable"></div>');
    }
    xslfile = 'xsl/sarit-base.xsl';
    xsl = loadXMLDoc(xslfile);
    xsltProcessor = new XSLTProcessor();
    xsltProcessor.importStylesheet(xsl);
    result = xsltProcessor.transformToFragment(thisElement.currentElement[0], document);
    // put the result in a left-floated div
    $('div[id="'+urn+'"]').append('<div class="resultcontainer"></div>');
    $('div[id="'+urn+'"] div[class="resultcontainer"').append('<div class="result"></div>');
    $('div[id="'+urn+'"]').find('.result').append(result);
    // construct a div for "other sources" if not already available
    $('div[id="'+urn+'"] div[class="resultcontainer"]').append('<div class="sidebar"></div>');
    // add an 'about this text' link
    $('div[id="'+urn+'"] div[class="resultcontainer"] div[class="sidebar"]').append('<h3><a>about this text</a></h3>');
    // (this still needs to be worked on)
    // now call relatedTexts to populate that div
    if ( $('#related').length ) { }
    else { relatedTexts(urn); }
    // at the end, scroll to the div
    $('html, body').animate({
        scrollTop: $('div[id="'+urn+'"]').offset().top
    }, 2000)
    // close the box when you click on the x
    $(document).on('click','.close',function(){
        $(this).parent().fadeTo(300,0,function(){
            $(this).remove();
        });
    });
  }
}

function relatedTexts(urn) {
   xml = loadXMLDoc('linkgroup.xml');
   links = $(xml).find("link");
   for (i = 0; i < links.length; i++) {
     target = $(links[i]).attr('target');
     if (target.indexOf(urn) >= 0) {
       targets = target.replace(urn,'');
       related = targets.split(/\s+/);
       break;
     }
   }
   if (related != '') {
     $('div[id="'+urn+'"]').find('.sidebar').append('<div id="related"><h3>related texts</h3><ul></ul></div>');
     for (i = 0; i < related.length; i++) {
       relUrn = related[i];
       // this gets the title of the related text
       relEd = relUrn.slice(0, related[i].lastIndexOf(':')+1);
       title = $(inventory).find('edition[urn="'+relEd+'"]').find('label').text();
       // this gets the number of the related text
       relNo = relUrn.slice(related[i].lastIndexOf(':')+1, related[i].length);
       if (title != '') {
         $('div[id="related"] ul').append('<li><a id="'+relUrn+'" href="#">'+title+', verse '+relNo+'</a></li>');
         $('div[id="related"] a[id="'+relUrn+'"]').click( 
	     clickCallBack(relUrn));
       }
     }
     $('#related').accordion({
        collapsible:true
     });
   }
}

function clickCallBack(urn) {
  return function(){
    displayVerse(urn);
  }
}

function scrollTo(hash) {
  location.hash = "#" + hash;
}

function ParseUrn(urn) {
  // this will return an author, work, edition, and reference.
  // return the author
  components = urn.split(':');
  reference = components.pop();
  awe = components.pop();
  splitawe = awe.split('.');
  edition = splitawe.pop();
  work = splitawe.pop();
  author = splitawe.pop();
  return {
      author:author,
      work:work,
      edition:edition,
      reference:reference,
      awe:awe
  }
}

function goTo(urn) {
    components = document.location.toString().split('?');
    current = components[0]
    oldquerystring = components[1]
    newquerystring = "?urn="+urn;
    document.location = current+newquerystring;
}

// This is my clumsy implementation of the CITE Architecture's
// GetPassage request. It takes a CTN URN, and returns XML data.
function GetPassagePlus(urn) {
  levels = ParseUrn(urn).reference.split('.');
  editionTI =  $(inventory).find('edition[urn="urn:cts:indic:'+ParseUrn(urn).awe+':"]');
  citationMapping = $(editionTI).find('citationMapping');
  xml = loadXMLDoc($(editionTI).find('online').attr('docname'));
  // this is the title in the TEI document,
  // not the title in the textInventory document.
  title =  $(xml).find('titleStmt title').text();
  levelOne = levels[0];
  levelOnescheme = $(citationMapping).children('citation').attr('xpath');
  levelOnepath = levelOnescheme.replace('?',levelOne);
  levelOneresult = $(xml).xpath(levelOnepath, function(prefix) {
      if (prefix == "tei")
        return "http://www.tei-c.org/ns/1.0";
    });
  // if there is nothing else in the URN, our job is done.
  // otherwise we go on to level two.
  if (typeof levels[1] === 'undefined') {
    current = levelOneresult;
    context = levelOnepath;
  } else {
    levelTwo = levels[1];
    levelTwoscheme = $(citationMapping).children('citation').children('citation').attr('xpath');
    levelTwopath = levelTwoscheme.replace('?',levelTwo);
    levelTworesult = $(levelOneresult).xpath(levelTwopath, function(prefix) {
      if (prefix == "tei")
        return "http://www.tei-c.org/ns/1.0";
    });
    // if there is nothing else in the URN, our job is done.
    if (levels[2] === 'undefined') {
      current = levelTworesult;
      context = levelTwopath;
    // otherwise we go on to level three (not implemented yet)
    } else { 
      current = levelTworesult;
      context = levelTwopath;
    }
  }
  prev = $(xml).xpath(context, function(prefix) {
    if (prefix == "tei")
      return "http://www.tei-c.org/ns/1.0";
  }).prev();
  next = $(xml).xpath(context, function(prefix) {
    if (prefix == "tei")
      return "http://www.tei-c.org/ns/1.0";
  }).next();
  // return the current node and the next and previous nodes
  return {
    currentElement: current, 
    previousElement: prev,
    nextElement: next,
    title: title
  }
}
